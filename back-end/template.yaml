# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A SAM Application which forms part of the Exercise Challenge App

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # ADMIN CLUSTER
  # Lambda function to create an exercise in the exercises table
  createExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/AdminCluster/create-exercise.createExerciseHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ExercisesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          EXERCISES_TABLE: !Ref ExercisesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/create-exercise
            Method: POST

  createChallengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/AdminCluster/create-challenge.createChallengeHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ChallengeBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CHALLENGE_BUCKET: !Ref ChallengeBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/create-challenge
            Method: POST

  getChallengesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/AdminCluster/get-challenges.getChallengesHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ChallengeBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CHALLENGE_BUCKET: !Ref ChallengeBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/get-challenges
            Method: GET

  getChallengeDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/AdminCluster/get-challenge-details.getChallengeDetailsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ChallengeBucket
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CHALLENGE_BUCKET: !Ref ChallengeBucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/get-challenge-details
            Method: GET

  #USER CLUSTER
  # Lambda function to check the next order number
  getMyExercisesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UserCluster/get-my-exercises.getMyExercisesHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserExerciseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_EXERCISE_TABLE: !Ref UserExerciseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/get-my-exercise
            Method: GET

  getAllExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UserCluster/get-all-excercise.getAllExerciseHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserExerciseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_EXERCISE_TABLE: !Ref UserExerciseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/get-all-exercise
            Method: GET

  getExercisesListFuntion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UserCluster/get-exercises-list.getExercisesListHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ExercisesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          EXERCISES_TABLE: !Ref ExercisesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/get-exercises-list
            Method: GET

  deleteExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UserCluster/delete-exercise.deleteExerciseHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserExerciseTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_EXERCISE_TABLE: !Ref UserExerciseTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/delete-exercise
            Method: POST

  addExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/UserCluster/add-exercise.addExerciseHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrderCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserExerciseTable
        - DynamoDBReadPolicy:
            TableName: !Ref ExercisesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_EXERCISE_TABLE: !Ref UserExerciseTable
          EXERCISES_TABLE: !Ref ExercisesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/add-exercise
            Method: POST

  UserExerciseTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ExercisesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ChallengeBucket:
    Type: AWS::S3::Bucket

  ExerciseListBucket:
    Type: AWS::S3::Bucket

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
